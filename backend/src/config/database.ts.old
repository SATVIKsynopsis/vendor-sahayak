import mongoose from 'mongoose';
import { createClient } from 'redis';
import { logger } from '../utils/logger';

// MongoDB Configuration
export const connectMongoDB = async (): Promise<void> => {
  try {
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/streetvendor';
    
    const options = {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      bufferMaxEntries: 0,
    };

    await mongoose.connect(mongoUri, options);
    
    logger.info('‚úÖ MongoDB connected successfully');
    
    // Create indexes after connection
    await createIndexes();
    
  } catch (error) {
    logger.error('‚ùå MongoDB connection failed:', error);
    process.exit(1);
  }
};

// Redis Configuration
export const connectRedis = async () => {
  try {
    const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';
    
    const redisClient = createClient({
      url: redisUrl,
      socket: {
        reconnectStrategy: (retries) => Math.min(retries * 50, 1000),
      },
    });

    redisClient.on('error', (err) => {
      logger.error('Redis Client Error:', err);
    });

    redisClient.on('connect', () => {
      logger.info('‚úÖ Redis connected successfully');
    });

    redisClient.on('reconnecting', () => {
      logger.info('üîÑ Redis reconnecting...');
    });

    await redisClient.connect();
    
    return redisClient;
  } catch (error) {
    logger.error('‚ùå Redis connection failed:', error);
    throw error;
  }
};

// Create MongoDB Indexes
const createIndexes = async (): Promise<void> => {
  try {
    const db = mongoose.connection.db;
    
    if (!db) {
      logger.warn('Database connection not available for index creation');
      return;
    }
    
    // Users Collection Indexes
    await db.collection('users').createIndex({ mobileNumber: 1 }, { unique: true });
    await db.collection('users').createIndex({ 'location.coordinates': '2dsphere' });
    await db.collection('users').createIndex({ createdAt: -1 });
    await db.collection('users').createIndex({ businessType: 1 });
    await db.collection('users').createIndex({ preferredLanguage: 1 });
    
    // OTP Verifications Collection Indexes
    await db.collection('otpverifications').createIndex({ mobileNumber: 1 });
    await db.collection('otpverifications').createIndex({ expiresAt: 1 }, { expireAfterSeconds: 0 });
    await db.collection('otpverifications').createIndex({ createdAt: -1 });
    
    // Chat Sessions Collection Indexes
    await db.collection('chatsessions').createIndex({ userId: 1, createdAt: -1 });
    await db.collection('chatsessions').createIndex({ isActive: 1, updatedAt: -1 });
    await db.collection('chatsessions').createIndex({ language: 1 });
    
    // Chat Messages Collection Indexes
    await db.collection('chatmessages').createIndex({ sessionId: 1, timestamp: -1 });
    await db.collection('chatmessages').createIndex({ content: 'text', contentHindi: 'text' });
    
    logger.info('‚úÖ Database indexes created successfully');
    
  } catch (error) {
    logger.error('‚ùå Error creating indexes:', error);
  }
};

// MongoDB Event Handlers
mongoose.connection.on('connected', () => {
  logger.info('üîó Mongoose connected to MongoDB');
});

mongoose.connection.on('error', (err) => {
  logger.error('‚ùå Mongoose connection error:', err);
});

mongoose.connection.on('disconnected', () => {
  logger.warn('‚ö†Ô∏è Mongoose disconnected from MongoDB');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    logger.info('üëã MongoDB connection closed through app termination');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Error closing MongoDB connection:', error);
    process.exit(1);
  }
});

export { mongoose };
